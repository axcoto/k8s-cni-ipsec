# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

# Define the whole cluster in this hashmap
CLUSTER = {
  :token => "390699.8859a9a052d8b9f9".freeze,
  :nodes => {
    :master  => {:ip => %(10.9.0.2).freeze, :mem => 1536},
    :minion1 => {:ip => %(10.9.0.3).freeze, :mem => 512},
    :minion2 => {:ip => %(10.9.0.4).freeze, :mem => 512},
  }
}

# Customize node setting such as memory, cpu, etc, this use
# a platform depended API.
# Currently we only support virtualbox
def custom_node(vm, name)
  vm.hostname = name
  vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--memory", CLUSTER[:nodes][name][:mem]]
  end
end

# Define network stack
def config_network(vm, name)
  vm.network "private_network", ip: CLUSTER[:nodes][name][:ip]
end

def is_master(name)
  name.to_s == 'master'
end

# Depend on node role, the bootstrap process is different by passing an argument
# to bootstrap script
def provision(vm, name)
  vm.provision 'shell',
    path: 'provison/bootstrap.sh',
    args: (is_master(name) ? 'master': ''),
    env: {KUBEADM_TOKEN: CLUSTER[:token], MASTER_ADDR: CLUSTER[:nodes][:master][:ip]}
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/xenial64"
  config.vm.boot_timeout = 600 # 10 minute timeout since it may slow to startup the cluster

  CLUSTER[:nodes].each do |name, _|
    config.vm.define name, primary: is_master(name) do |node|
      config_network node.vm, name
      custom_node node.vm, name
      provision node.vm, name
    end
  end
end
